name: Build and Deploy Documentation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-doc:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies (Python + Chrome for PDF generation)
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser
        pip install -r software/documentation/requirements.txt

    #################################################
    # Generate Professional Datasheet (HTML + PDF)
    #################################################
    - name: Generate Professional Datasheet
      working-directory: software/documentation
      env:
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        # Generate HTML professional datasheet with automatic image copying
        echo "🏆 Generating professional datasheet..."
        python generate_professional_pdf.py
        
        # Verify HTML was generated
        if [ ! -f "build/datasheet_professional.html" ]; then
          echo "❌ Error: HTML datasheet not generated"
          exit 1
        fi
        
        # Convert HTML to PDF using Chrome
        echo "📄 Converting to PDF with Chrome..."
        cd build
        chromium-browser --headless --disable-gpu \
          --print-to-pdf=${REPO_NAME}_product_brief.pdf \
          --print-to-pdf-no-header --no-margins \
          file://$(pwd)/datasheet_professional.html
        
        # Verify PDF was generated
        if [ ! -f "${REPO_NAME}_product_brief.pdf" ]; then
          echo "❌ Error: PDF not generated"
          exit 1
        fi
        
        echo "✅ Professional datasheet generated successfully"

    #################################################
    # Deploy to docs/ directory for GitHub Pages
    #################################################
    - name: Prepare docs/ directory
      env:
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        # Clean and create docs directory
        rm -rf docs
        mkdir -p docs

        # Copy generated files from build/
        cp software/documentation/build/${REPO_NAME}_product_brief.pdf docs/
        cp software/documentation/build/datasheet_professional.html docs/
        
        # Copy all images and resources (generator already copied everything to build/)
        find software/documentation/build -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" \) -exec cp {} docs/ \; 2>/dev/null || true
        
        # Copy images directory if exists
        if [ -d "software/documentation/build/images" ]; then
          cp -r software/documentation/build/images docs/
        fi
        
        # Create index.html that redirects to datasheet
        echo "<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><title>Product Documentation</title><meta http-equiv=\"refresh\" content=\"0; url=datasheet_professional.html\"></head><body><p>Redirecting to <a href=\"datasheet_professional.html\">professional datasheet</a>...</p></body></html>" > docs/index.html

        # Enable GitHub Pages
        touch docs/.nojekyll
        
        echo "✅ Documentation deployed to docs/ directory"

    #################################################
    # Publicar cambios a la rama main
    #################################################
    - name: Commit and push docs/ to main
      if: github.ref == 'refs/heads/main'
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git pull origin main
        git add docs/
        git commit -m "Deploy professional documentation and product brief [skip ci]" || echo "No changes"
        git push origin main