name: Build and Deploy Documentation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-doc:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies (Python + Node.js for PDF generation)
      run: |
        sudo apt-get update
        sudo apt-get install -y nodejs npm chromium-browser
        pip install -r software/documentation/requirements.txt
        pip install -r software/sphinx/requirements.txt
        
        # Install Puppeteer for HTML to PDF conversion
        npm install -g puppeteer

    #################################################
    # Generar Professional PDF del Product Brief
    #################################################
    - name: Build Professional PDF from README
      working-directory: software/documentation
      env:
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        # Verificar que los archivos necesarios existen
        ls -la ../../README.md
        ls -la ../../hardware/resources/ || echo "Hardware resources directory not found"
        
        # Generar HTML profesional
        python generate_professional_pdf.py
        
        # Verificar que el HTML se generó correctamente
        if [ ! -f "professional_datasheet.html" ]; then
          echo "Error: professional_datasheet.html not generated"
          exit 1
        fi
        
        # Crear directorio build si no existe
        mkdir -p build
        
        # Convertir HTML a PDF usando Puppeteer
        node -e "
        const puppeteer = require('puppeteer');
        (async () => {
          const browser = await puppeteer.launch({
            args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
          });
          const page = await browser.newPage();
          await page.goto('file://' + process.cwd() + '/professional_datasheet.html', {
            waitUntil: 'networkidle0'
          });
          await page.pdf({
            path: 'build/${REPO_NAME}_product_brief.pdf',
            format: 'A4',
            printBackground: true,
            margin: {
              top: '12mm',
              right: '10mm',
              bottom: '12mm',
              left: '10mm'
            }
          });
          await browser.close();
          console.log('PDF generated successfully');
        })();
        "
        
        # Verificar que el PDF se generó
        if [ ! -f "build/${REPO_NAME}_product_brief.pdf" ]; then
          echo "Error: PDF not generated"
          exit 1
        fi
        
        echo "Professional datasheet generated successfully"

    #################################################
    # Generar Documentación Sphinx (HTML + PDF)
    #################################################
    - name: Build Sphinx Documentation
      working-directory: software/sphinx
      run: |
        make clean
        make pdfx

    #################################################
    # Preparar contenido para docs/
    #################################################
    - name: Prepare docs/ directory
      env:
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        rm -rf docs
        mkdir -p docs

        # PDF profesional generado desde HTML
        cp software/documentation/build/${REPO_NAME}_product_brief.pdf docs/

        # HTML profesional para visualización web
        cp software/documentation/professional_datasheet.html docs/

        # Copiar imágenes necesarias para el HTML
        mkdir -p docs/images
        if [ -f "software/documentation/images/logo_unit.png" ]; then
          cp software/documentation/images/logo_unit.png docs/images/
        fi
        
        # Copiar imágenes de hardware si existen
        if [ -d "hardware/resources" ]; then
          # Copiar todas las imágenes de hardware manteniendo estructura
          find hardware/resources -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.pdf" \) -exec cp {} docs/ \; 2>/dev/null || true
        fi

        # PDF generado por Sphinx
        cp software/sphinx/pdf/programmer.pdf docs/${REPO_NAME}_sphinx.pdf

        # HTML generado por Sphinx
        cp -r software/sphinx/docs/* docs/

        # Permitir archivos especiales en GitHub Pages
        touch docs/.nojekyll

    #################################################
    # Publicar cambios a la rama main
    #################################################
    - name: Commit and push docs/ to main
      if: github.ref == 'refs/heads/main'
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git pull origin main
        git add docs/
        git commit -m "Deploy professional documentation and product brief [skip ci]" || echo "No changes"
        git push origin main