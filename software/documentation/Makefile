# Makefile para generaci√≥n de hojas de datos
# M√∫ltiples m√©todos disponibles: LaTeX, HTML, WeasyPrint

.PHONY: all fast latex weasy compare clean help install

# Variables
README = README.md
BUILD_DIR = build

# Comando por defecto - versi√≥n profesional para distribuci√≥n
all: professional

# M√©todo PROFESIONAL optimizado para DISTRIBUCI√ìN (con im√°genes de hardware/)
professional:
	@echo "üèÜ Generando hoja de datos PROFESIONAL..."
	@mkdir -p $(BUILD_DIR)
	@python generate_professional_pdf.py
	@echo "‚úÖ Listo! Calidad profesional con im√°genes de hardware/resources/"

# M√©todo optimizado para DISTRIBUCI√ìN (Pinout + Dimensiones)
distribution:
	@echo "üìã Generando hoja de DISTRIBUCI√ìN T√âCNICA..."
	@mkdir -p $(BUILD_DIR)
	@python generate_distribution_pdf.py
	@echo "‚úÖ Listo! Optimizada para pinout y dimensiones"

# M√©todo s√∫per r√°pido (HTML + CSS, sin dependencias)
fast:
	@echo "üöÄ Generando hoja de datos S√öPER R√ÅPIDA..."
	@mkdir -p $(BUILD_DIR)
	@python generate_pdf_super_fast.py
	@echo "‚úÖ Listo! Abre build/datasheet_super_fast.html en tu navegador"

# M√©todo con WeasyPrint (HTML -> PDF directo)
weasy:
	@echo "üîß Generando con WeasyPrint..."
	@mkdir -p $(BUILD_DIR)
	@python generate_pdf_weasy.py

# M√©todo original LaTeX (m√°s lento pero muy profesional)
latex:
	@echo "üìù Generando con LaTeX..."
	@mkdir -p $(BUILD_DIR)
	@python generate_pdf.py

# Comparar rendimiento de todos los m√©todos
compare:
	@echo "‚öñÔ∏è Comparando rendimiento de todos los m√©todos..."
	@python benchmark.py

# Instalar dependencias opcionales
install:
	@echo "üì¶ Instalando dependencias opcionales..."
	@pip install weasyprint reportlab
	@echo "‚úÖ Dependencias instaladas"

# Instalar solo dependencias m√≠nimas
install-minimal:
	@echo "üì¶ Instalando dependencias m√≠nimas..."
	@pip install weasyprint
	@echo "‚úÖ WeasyPrint instalado"

# Limpiar archivos generados
clean:
	@echo "üßπ Limpiando archivos generados..."
	@rm -rf $(BUILD_DIR)
	@echo "‚úÖ Limpieza completada"

# Generar PDF directo profesional con wkhtmltopdf
pdf-professional:
	@echo "üìÑ Generando PDF profesional directo..."
	@mkdir -p $(BUILD_DIR)
	@python generate_professional_pdf.py
	@if command -v wkhtmltopdf >/dev/null 2>&1; then \
		echo "üîß Convirtiendo HTML profesional a PDF..."; \
		wkhtmltopdf --page-size A4 --margin-top 20mm --margin-bottom 20mm \
		--margin-left 15mm --margin-right 15mm --enable-local-file-access \
		--print-media-type --disable-smart-shrinking \
		$(BUILD_DIR)/datasheet_professional.html $(BUILD_DIR)/datasheet_professional.pdf; \
		echo "‚úÖ PDF profesional generado: $(BUILD_DIR)/datasheet_professional.pdf"; \
	else \
		echo "‚ö†Ô∏è wkhtmltopdf no instalado. Usa: make install-pdf-tools"; \
		echo "üìÑ HTML disponible: $(BUILD_DIR)/datasheet_professional.html"; \
	fi

# Generar y abrir autom√°ticamente (m√©todo r√°pido)
fast-open: fast
	@echo "üåê Abriendo en navegador..."
	@python -c "import webbrowser, os; webbrowser.open('file://' + os.path.abspath('build/datasheet_super_fast.html'))"

# Generar y abrir autom√°ticamente (versi√≥n profesional)
professional-open: professional
	@echo "üåê Abriendo hoja de datos profesional..."
	@python -c "import webbrowser, os; webbrowser.open('file://' + os.path.abspath('build/datasheet_professional.html'))"

# Generar y abrir autom√°ticamente (distribuci√≥n)
distribution-open: distribution
	@echo "üåê Abriendo hoja de distribuci√≥n..."
	@python -c "import webbrowser, os; webbrowser.open('file://' + os.path.abspath('build/datasheet_distribution.html'))"

# Instalar herramientas para PDF directo
install-pdf-tools:
	@echo "üîß Instalando herramientas para PDF..."
	@if command -v apt >/dev/null 2>&1; then \
		sudo apt update && sudo apt install -y wkhtmltopdf; \
	elif command -v brew >/dev/null 2>&1; then \
		brew install wkhtmltopdf; \
	else \
		echo "‚ö†Ô∏è Instala manualmente wkhtmltopdf para tu sistema"; \
	fi
	@echo "‚úÖ Herramientas instaladas"

# M√©todo r√°pido con conversi√≥n autom√°tica a PDF (requiere navegador)
fast-pdf: fast
	@echo "üñ®Ô∏è Para convertir a PDF:"
	@echo "   1. Se abrir√° en tu navegador"
	@echo "   2. Presiona Ctrl+P (o Cmd+P en Mac)"
	@echo "   3. Selecciona 'Guardar como PDF'"
	@python -c "import webbrowser, os; webbrowser.open('file://' + os.path.abspath('build/datasheet_super_fast.html'))"

# Verificar que README.md existe
check:
	@if [ ! -f $(README) ]; then \
		echo "‚ùå Error: $(README) no encontrado"; \
		exit 1; \
	fi
	@echo "‚úÖ $(README) encontrado"

# Mostrar informaci√≥n de ayuda
help:
	@echo "üõ†Ô∏è GENERADOR DE HOJAS DE DATOS - AYUDA"
	@echo "======================================"
	@echo ""
	@echo "Comandos disponibles:"
	@echo "  make professional    - Genera hoja PROFESIONAL con im√°genes (RECOMENDADO) ÔøΩ"
	@echo "  make professional-open - Genera y abre hoja profesional"
	@echo "  make pdf-professional  - Genera PDF profesional directo"
	@echo "  make distribution    - Genera hoja para distribuci√≥n (pinout+dimensiones)"
	@echo "  make distribution-open - Genera y abre hoja de distribuci√≥n"
	@echo "  make fast            - Genera HTML s√∫per r√°pido (gen√©rico)"
	@echo "  make fast-open       - Genera y abre en navegador"
	@echo "  make fast-pdf        - Genera e instrucciones para PDF"
	@echo "  make weasy           - Genera PDF con WeasyPrint"
	@echo "  make latex           - Genera PDF con LaTeX (m√©todo original)"
	@echo "  make compare         - Compara rendimiento de todos los m√©todos"
	@echo "  make install         - Instala todas las dependencias"
	@echo "  make install-pdf-tools - Instala wkhtmltopdf para PDF directo"
	@echo "  make clean           - Limpia archivos generados"
	@echo "  make check           - Verifica que README.md exists"
	@echo "  make help            - Muestra esta ayuda"
	@echo ""
	@echo "ÔøΩ RECOMENDADO PARA DISTRIBUCI√ìN PROFESIONAL:"
	@echo "  make professional-open   (calidad comercial con im√°genes)"
	@echo ""
	@echo "‚ö° Velocidad estimada:"
	@echo "  - Professional:  < 0.1 segundos ‚≠ê‚≠ê‚≠ê"
	@echo "  - Distribution:  < 0.1 segundos ‚≠ê"
	@echo "  - HTML (fast):   < 0.1 segundos"
	@echo "  - WeasyPrint:    ~ 1-2 segundos"
	@echo "  - LaTeX:         ~ 5-15 segundos"

# Crear ejemplo de README si no existe
example:
	@if [ ! -f $(README) ]; then \
		echo "üìù Creando README.md de ejemplo..."; \
		cp README_example.md $(README); \
		echo "‚úÖ $(README) creado. Ed√≠talo y ejecuta 'make fast'"; \
	else \
		echo "‚ö†Ô∏è $(README) ya existe"; \
	fi

# Desarrollo: regenerar autom√°ticamente cuando README cambie
watch:
	@echo "üëÅÔ∏è Monitoreando cambios en $(README)..."
	@echo "Presiona Ctrl+C para detener"
	@while inotifywait -e modify $(README) 2>/dev/null; do \
		echo "üîÑ README modificado, regenerando..."; \
		make fast; \
		echo "‚úÖ Regenerado a las $$(date '+%H:%M:%S')"; \
	done

# Analizar contenido y obtener recomendaciones
analyze:
	@echo "üîç Analizando contenido y generando recomendaciones..."
	@python analyze_and_recommend.py
